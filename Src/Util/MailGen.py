#! /usr/local/bin/python
"""
This program is designed to perform the specific task of the reading the log
file generated by Griz and creating a mailing list.  It takes no parameters and
and all directories are hard coded to /usr/gapps/mdg
"""
import string,os,sys,popen2
default_dir = "/usr/gapps/mdg/"

# class MailGen -- class for generating mail list from the /usr/gapp/mdg
# directory. It will search all files in this directory beginning with griz_usagelog 
class MailGen:
	def __init__(self):
		pass
	
	# function processcLogFile the entry point. It take an array list of logfiles
	# to process
	def processLogFile(self, logfiles):
		users = {}
		for filename in logfiles:
			try:
				file = open(filename,'r')
			except IOError:
				print "Info: could not open %s\n continuing on..." % filename 
			for line in file.readlines():
				if line.find("USER") >= 0:
					pieces = line.split()
					for piece in pieces:
						if piece.find("USER") >=0:
							user = piece.split('[')[1][:-1]
							if not user in users.keys(): 
								users[user]=self.fingerUserForEmail(user)
							
		self.writeMailingList(users)
		
	# function for writing out the griz_mail_list.txt file
	# param users dictionary constisting of user login id's and emails
	def writeMailingList(self, users):

		f = open("griz_mail_list.txt",'w')
		for key in sorted(users.keys()):
			f.write("%s\n" % users[key])
		f.close()

	# function to perform a finger on the user name to get the full name for
	# performing a ph.
	def fingerUserForEmail(self, loginname):
		
		p = popen2.Popen4("finger %s" % loginname)
		
		for line in p.fromchild.readlines():

			sline = line.strip()
			if sline.find("Name:") >= 0:
				username=  sline.split("Name:")[1].strip()
				return self.phUserForEmail(username,username)

	# function for getting the email from ph. I first tries the full user
	# name. It then will try the first letter of the first name and the
	# first 5 letters of the last name. As a last ditch effort it tries just
	# the last name.   
	def phUserForEmail(self, username, orig_name, index=0):
		p = popen2.Popen4("ph  %s return email" % username)

		email = None
		for line in p.fromchild.readlines():

			sline = line.strip()
			if sline.find("501:")>=0:
				#lets try and refine the search a bit
				if index == 0:
					names = orig_name.split()
					firstname = names[0][0]+"\\*"
					lastname = names[-1][0:5]+"\\*"

					email = self.phUserForEmail(firstname+" "+lastname, orig_name,index+1)

				elif index == 1:
					email = self.phUserForEmail(username.split()[-1],orig_name, index+1)

					

			elif sline.find("email") >= 0:
				email =  sline.split(':')[1].strip()
		return email
if __name__ == "__main__":
	m = MailGen()
	
	tfiles = os.listdir(default_dir)
	files = []
	for file in tfiles:
		if file.find("griz_usagelog")>=0:
			files.append("%s%s" % (default_dir,file))

	m.processLogFile(files)
