# $Id$
#
#################################################################
#								#
#	           Griz4 Driver Makefile	                #
#								#
#################################################################
#
#################################################################
#  Revision History                                             #
#  ----------------                                             #
#  20-Feb-2004  IRC  Rewritten to work with Autoconf.           #
#  24-Nov-2004  trt  Added logic for VersionInfo option.        #
#  15-Feb-2007  IRC  Added batch run support. 		        #
#################################################################
#
# Makefile - This is the makefile for GRIZ
#
# Author:	Don Dovey
#               Lawrence Livermore National Laboratory
#               Jan 3 1992
#
# V2.0 update:	Doug Speck
#               Lawrence Livermore National Laboratory
#               March 11, 1996
#
# V4.0 update:  Doug Speck
#               Lawrence Livermore National Laboratory
#               February 9, 1999
#
# V4.1 update:  Bob Corey
#               Lawrence Livermore National Laboratory
#               March 20, 2004
#
# V4.2 update:  Bob Corey
#               Lawrence Livermore National Laboratory
#               January 31, 2005
#               Changes to support Intel Opteron processor.
#
#       02-Oct-07 IRC: Updated
#                      Add support for KlockWorks build - Re: Bill Oliver.
#		       SCR # 429

# Note: Updated Makefile for Griz sources. Made more general
#       so that it can be used for any platform. This Makefile
#       is called from a driver Makefile (Makefile.Driver).
#
# Copyright (c) 1992, Regents of the University of California
# Copyright (c) 1996, Regents of the University of California
# Copyright (c) 2004, Regents of the University of California
#
srcdir= @srcdir@
abs_srcdir= @abs_srcdir@
top_srcdir= @top_srcdir@
abs_top_srcdir= @abs_top_srcdir@
builddir= @builddir@
abs_builddir= @abs_builddir@
top_builddir= @top_builddir@
abs_top_builddir= @abs_top_builddir@
VPATH = @srcdir@

GRIZ_VERSION = @GRIZ_VERSION@
MILI_VERSION = @MILI_VERSION@

OS_NAME    = @OS_NAME@
#

CC  = @CC@

CONFIG_STRING=@CONFIG_OPTIONS@

INCLUDE_PATHS = @CC_INCLUDE_PATHS_GRIZ@ @MILI_INCLUDE_PATHS@
CC_FLAGS = @CFLAGS@
CC_FLAGS_DEBUG= @CC_FLAGS_DEBUG@ 
CC_FLAGS_OPT  = @CC_FLAGS_OPT@
CC_FLAGS_EXTRA= @CC_FLAGS_EXTRA@ 
CC_DEPEND     = @CC_DEPEND@ 
BASELIBS          = -L/usr/lib64 -L@MILI_HOME@/lib @MILI_LIBRARY@ @LIBS@ @GRIZLIBS@
LDLIBPATH     = @LDLIBPATH@
LDFLAGS_EXTRA = @LDFLAGS_EXTRA@
LD            = @CC@
OSMESA_LIBS = @OSMESA_LIBRARY_PATHS@ @OSMESA_LIBRARY@
OSMESA_HOME = @OSMESA_HOME@

# For UV add the following to the Load Line
# -blpdata
# LDFLAGS_EXTRA = -blpdata

ROOT_DIR      = @ROOT_DIR@

# Set a pointer to the path for the Hershey fonts
HFONTLOC      = @HERSHEY_FONTLIB@

INSTALL_HOME  = @prefix@

#
# KlocWorks Build Option - Added 10/06/2007: IRC
#
ifeq (@KW_ENABLE@,True)
KW_CMD=kwwrap -o @KW_HOME@griz.trace
CC=$(KW_CMD) gcc
endif


# Suffix rule to create the object files.
# rules to automatically generate dependency makefiles
.SUFFIXES : .c .o .h

%.o: %.c
	$(PURIFY_CMD) $(CC) $(CC_FLAGS) $(CPPFLAGS) -c $<



# Set name of griz binary appropriately. The name "griz4s" is used
# for the Griz shell script make target, below.
GRIZ_EXE_DEBUG = @GRIZ_EXE@_debug
GRIZ_EXE_OPT   = @GRIZ_EXE@_opt

# Set to location of GRIZ source. Use an absolute path if GRIZHOME
# is used to define GRIZBINLOC and HFONTLOC, below.
GRIZHOME = @GRIZ_HOME@

PURIFY := @PURIFY@

# Griz4s and griz4 common objects

OBJS = \
	versioninfo.o \
	viewer.o \
	faces.o \
	geometric.o \
	misc.o \
	interpret.o \
	time.o \
	show.o \
	draw.o \
	results.o \
	iso_surface.o \
	gui.o \
	contour.o \
	stress.o \
	strain.o \
	node.o \
	frame.o \
	time_hist.o \
	shape.o \
	flow.o \
	poly.o \
	explode.o \
	init_io.o \
	io_wrappers.o \
	result_data.o \
	tell.o \
	traction_force.o \
	minmax.o \
	damage.o \
	offscreen.o \
	hidden_inline.o \
	free_nodes.o \
	alphanum_comp.o

SRCS = $(OBJS:%.o=%.c)

OBJS_DEBUG = $(addprefix $(ROOT_DIR)/objs_debug/, $(OBJS)) 
OBJS_OPT   = $(addprefix $(ROOT_DIR)/objs_opt/,   $(OBJS)) 

# Finally, targets...
all: 		
	$(MAKE) debug; 
	$(MAKE) batch_debug; 
	$(MAKE) opt;
	$(MAKE) batch_opt; 

mililibcheck.o:	mililibcheck.c
		$(CC) $(CC_FLAGS) $(CPPFLAGS) \
	        -DGRIZ_VERSION="\"$(GRIZ_VERSION)\"" \
	        -DMILI_VERSION="\"$(MILI_VERSION)\"" \
	        -c mililibcheck.c

mililibcheck:	mililibcheck.o
		$(LD) $(CC_FLAGS) $? -o $@ $(LDFLAGS_EXTRA) -L@MILI_HOME@/lib @MILI_LIBRARY@

mililibcheck.txt:   mililibcheck
		$(RM) temp
		./mililibcheck > temp
		$(RM) mililibcheck
		@ if `grep MILI_LIB_OK temp >/dev/null 2>&1` ; then \
	              echo "\n\n Mili Library check passed = OK\n\n"; \
	              mv temp $@; \
	          else \
	              echo "\n *** Fatal Error ****"; \
	              echo "\n Build aborting - Outdated Mili Library referenced"; \
	              echo "\n *** Fatal Error ****\n\n"; \
	              exit 1; \
	        fi
error_batch:
	@ echo "Unable to build batch GRIZ"

mk_dirs:
	@echo ... $(EXEC_PATH) $(LIB_PATH) $(OBJS_PATH) ....
	@ -mkdir -p $(EXEC_PATH)
	@ -mkdir -p $(OBJS_PATH)

ifeq (@BATCH_ENABLE@,True)
# Build Batch Optimized Griz
batch_debug:      LIBS = $(BASELIBS) $(OSMESA_LIBS) @X11_LIBRARY_PATHS@ @NO_MESA_X11_LIBS@
batch_debug:	  LDFLAGS_EXTRA += $(OSMESA_LIBS) @X11_LIBRARY_PATHS@ @NO_MESA_X11_LIBS@
batch_debug:	  CC_FLAGS  = -g
batch_debug:      EXEC_PATH = $(ROOT_DIR)/bin_batch_debug
batch_debug:      LIB_PATH  = $(ROOT_DIR)/lib_batch_debug
batch_debug:      OBJS_PATH = $(ROOT_DIR)/objs_batch_debug
batch_debug:	  LDFLAGS  += $(OSMESA_LIBS)
batch_debug:      GRIZ_EXE = $(GRIZ_EXE_DEBUG)_batch
batch_debug:      GRIZ_EXE_PATH = $(EXEC_PATH)/$(GRIZ_EXE)
batch_debug:      GRIZ_BATCH_EXE = $(GRIZ_EXE)
batch_debug:	  MILILIBPATH = @MILI_LIBRARY_PATHS@
batch_debug:      CPPFLAGS = "@BATCH_DEFINES@ $(CPPFLAGS)"
batch_debug: 	  DEFINES       = @CC_DEFINES_GRIZ@ @BATCH_DEFINES@
batch_debug: 	  CPPFLAGS  = @CC_DEFINES_GRIZ@  @BATCH_DEFINES@ $(INCLUDE_PATHS) -I$(OSMESA_HOME)/../include -I$(top_builddir)
batch_debug:	  mk_dirs buildinfo.h build griz4s $(EXO_TARGET)

# Build Optimized Griz
batch_opt:	LIBS = $(BASELIBS) $(OSMESA_LIBS) @X11_LIBRARY_PATHS@ @NO_MESA_X11_LIBS@
batch_opt:	LDFLAGS_EXTRA += $(OSMESA_LIBS) @X11_LIBRARY_PATHS@ @NO_MESA_X11_LIBS@
batch_opt:	EXEC_PATH = $(ROOT_DIR)/bin_batch_opt
batch_opt:  LIB_PATH  = $(ROOT_DIR)/lib_batch_opt
batch_opt:  OBJS_PATH = $(ROOT_DIR)/objs_batch_opt
batch_opt:	LDFLAGS  += $(OSMESA_LIBS)
batch_opt:  GRIZ_EXE = $(GRIZ_EXE_OPT)_batch
batch_opt:  GRIZ_EXE_PATH = $(EXEC_PATH)/$(GRIZ_EXE)
batch_opt:  GRIZ_BATCH_EXE = $(GRIZ_EXE)
batch_opt:  MILILIBPATH = @MILI_LIBRARY_PATHS@
batch_opt:	CPPFLAGS = "@BATCH_DEFINES@ $(CPPFLAGS)"
batch_opt: 	DEFINES += @CC_DEFINES_GRIZ@ @BATCH_DEFINES@
batch_opt: 	CPPFLAGS  = @CC_DEFINES_GRIZ@  @BATCH_DEFINES@ $(INCLUDE_PATHS) -I$(OSMESA_HOME)/../include -I$(top_builddir)
batch_opt:	mk_dirs buildinfo.h build griz4s $(EXO_TARGET)
else
batch_opt: error_batch
endif

# Build Optimized Griz
opt:      LIBS = $(BASELIBS) @X11_LIBRARY_PATHS@ @X11_LIBS@
opt:      EXEC_PATH = $(ROOT_DIR)/bin_opt
opt:      LIB_PATH  = $(ROOT_DIR)/lib_opt
opt:      OBJS_PATH = $(ROOT_DIR)/objs_opt
opt:      LDFLAGS  += -L../lib_opt
opt:      GRIZ_EXE_PATH = $(EXEC_PATH)/$(GRIZ_EXE)
opt:      GRIZ_EXE = $(GRIZ_EXE_OPT)
opt:      GRIZ_BATCH_EXE = $(GRIZ_EXE_OPT)
opt: 	    DEFINES += @CC_DEFINES_GRIZ@ 
opt: 	    CPPFLAGS  = @CC_DEFINES_GRIZ@  $(INCLUDE_PATHS) -I$(top_builddir)
opt:	    MILILIBPATH = @MILI_LIBRARY_PATHS@
opt:	    cleanopt mk_dirs  buildinfo.h build griz4s $(EXO_TARGET)

# Build Debug Griz
debug:  LIBS = $(BASELIBS) @X11_LIBRARY_PATHS@ @X11_LIBS@
debug:	CC_FLAGS  = -g
debug:	EXEC_PATH = $(ROOT_DIR)/bin_debug
debug:	LIB_PATH  = $(ROOT_DIR)/lib_debug
debug:	OBJS_PATH = $(ROOT_DIR)/objs_debug
debug:	LDFLAGS  += -L../lib_debug
debug:	GRIZ_EXE_PATH = $(EXEC_PATH)/$(GRIZ_EXE)
debug:	GRIZ_EXE = $(GRIZ_EXE_DEBUG)
debug: 	DEFINES += @CC_DEFINES_GRIZ@ 
debug: 	CPPFLAGS  = @CC_DEFINES_GRIZ@  $(INCLUDE_PATHS) -I$(top_builddir)
debug:	GRIZ_BATCH_EXE = $(GRIZ_EXE_DEBUG)_batch
debug:	MILILIBPATH = @MILI_LIBRARY_PATHS@
debug:	mk_dirs alpha beta buildinfo.h build griz4s $(EXO_TARGET)

alpha: 
	ln -sf $(EXEC_PATH) $(ROOT_DIR)/alpha

beta:
	ln -sf $(EXEC_PATH) $(ROOT_DIR)/beta

# The objects for the versions of Griz are stored
# off in seperate directories after compilation. They are moved
# back into the src directory before we do another build.
build:  mililibcheck.txt update_objects $(OBJS)
		@echo ... New Build ...
		@echo ... $(CONFIG_STRING) ...
		$(LD) $(CC_FLAGS) $(LDFLAGS_EXTRA) -o $(GRIZ_EXE) $(OBJS) $(MILILIBPATH) $(MILILIB) $(LIBS)
		@ -mv $(ROOT_DIR)/src/*.o $(OBJS_PATH)
		mv $(GRIZ_EXE) $(EXEC_PATH)/$(GRIZ_EXE)
		-cp ../Doc/griz_start_text $(EXEC_PATH)/. ;
		if test -e ../Doc/Griz4-Manual-$(GRIZ_VERSION)/GrizUsersGuide-$(GRIZ_VERSION).pdf; then \
			cp ../Doc/Griz4-Manual-$(GRIZ_VERSION)/GrizUsersGuide-$(GRIZ_VERSION).pdf $(EXEC_PATH)/.; \
			ln -sf GrizUsersGuide-$(GRIZ_VERSION).pdf $(EXEC_PATH)/griz_manual.pdf; \
		fi ;
		if test -e ../Doc/Griz4-Manual-$(GRIZ_VERSION)/griz_relnotes.pdf; then \
			cp ../Doc/Griz4-Manual-$(GRIZ_VERSION)/griz_relnotes.pdf $(EXEC_PATH)/.; \
		fi 

# Move objects for appropriate code (opt or debug) back into src
# directory where build take place. 
update_objects:
		-mv $(OBJS_PATH)/*.o $(ROOT_DIR)/src

#
# The griz shell script will always rebuild when the "griz4s" make
# target is evaluated.  It's cheap, and any changes to GRIZBINLOC,
# HFONTLOC, or GRIZ_SERIAL will then always be reflected in the script. 
# To eliminate this behavior, delete "force_rebuild" from the "griz4s"
# dependencies.
#
griz4s:	mililibcheck.txt griz.in
	sed '/_grizhome_/ s/_grizhome_/'`echo $(EXEC_PATH) | sed 's/\\//\\\\\//g'`'/' \
		griz.in \
	| sed '/_hfontlib_/ s/_hfontlib_/'`echo $(HFONTLOC) | sed 's/\\//\\\\\//g'`'/' \
	| sed '/_grizbin_/ s/_grizbin_/$(GRIZ_EXE)/' \
	| sed '/_grizbinbatch_/ s/_grizbinbatch_/$(GRIZ_BATCH_EXE)/' \
	| sed '/_ldlibpath_/ s/_ldlibpath_/'`echo $(LDLIBPATH) | sed 's/\\//\\\\\//g'`'/' \
	> $@;
	chmod 755 $@;
	mv $@ $(EXEC_PATH);

versioninfo.o:  buildinfo.h

buildinfo.h:    buildinfo
		$(RM) t.h
		./buildinfo > t.h
		mv t.h $@

buildinfo.o:	buildinfo.c
		$(CC) $(CC_FLAGS) $(CPPFLAGS) \
	            -DGRIZ_VERSION="\"$(GRIZ_VERSION)\"" \
	            -DMILI_VERSION="\"$(MILI_VERSION)\"" \
		    -DCOMPILE_CMD="\"$(CC) $(CC_FLAGS) $(CPPFLAGS) \"" \
		    -DLINK_CMD="\"$(CC) $(CC_FLAGS) $(LDFLAGS_EXTRA) $(LIBS)\"" \
		    -DMAKE_CMD="\"$(MAKECMDGOALS)\"" \
		   -c buildinfo.c

buildinfo:	buildinfo.o
		$(LD) $(CC_FLAGS) $? -o $@ $(LDFLAGS_EXTRA)

clean:
	-rm -f *.o *.so so_locations
	-rm -f buildinfo buildinfo.h
	-rm -f $(ROOT_DIR)/bin_debug/*
	-rm -f $(ROOT_DIR)/bin_opt/*
	-rm -f $(ROOT_DIR)/objs_debug/* 
	-rm -f $(ROOT_DIR)/objs_opt/* 

cleanopt:
	-touch $(ROOT_DIR)/src/*.c
	-touch $(ROOT_DIR)/src/*.h

clobber: clean


distclean:

##################
# INSTALL TARGETS
# All of the targets below are used for installing the code in public
##################
install-build:
	$(MAKE) opt;
	$(MAKE) batch_opt;
	
	
install: install-opt

install-opt: install-griz4s

#
# The griz shell script will always rebuild when the "griz4s" make
# target is evaluated.  It's cheap, and any changes to GRIZBINLOC,
# HFONTLOC, or GRIZ_SERIAL will then always be reflected in the script. 
# To eliminate this behavior, delete "force_rebuild" from the "griz4s"
# dependencies.
#
install-griz4s: install-setversion griz.in	
	sed '/_grizhome_/ s/_grizhome_/'`echo $(INSTALL_HOME)/$(GRIZ_VERSION)/bin | sed 's/\\//\\\\\//g'`'/' \
		griz.in \
	| sed '/_hfontlib_/ s/_hfontlib_/'`echo $(INSTALL_HOME)/$(GRIZ_VERSION)/Font | sed 's/\\//\\\\\//g'`'/' \
	| sed '/_grizbin_/ s/_grizbin_/$(GRIZ_EXE_OPT)/' \
	| sed '/_grizbinbatch_/ s/_grizbinbatch_/$(GRIZ_EXE_OPT)_batch/' \
	| sed '/_ldlibpath_/ s/_ldlibpath_/'`echo $(LDLIBPATH) | sed 's/\\//\\\\\//g'`'/' \
	> $(INSTALL_HOME)/$(GRIZ_VERSION)/bin/griz4s;
	chmod 755 $(INSTALL_HOME)/$(GRIZ_VERSION)/bin/griz4s;
	mv $(ROOT_DIR)/bin_opt/$(GRIZ_EXE_OPT) $(INSTALL_HOME)/$(GRIZ_VERSION)/bin/$(GRIZ_EXE_OPT);
ifeq (@BATCH_ENABLE@,True)
	mv $(ROOT_DIR)/bin_batch_opt/$(GRIZ_EXE_OPT)_batch $(INSTALL_HOME)/$(GRIZ_VERSION)/bin/$(GRIZ_EXE_OPT)_batch;
endif
	
install-initversion: install-build 
	
	echo " "; \
	if test -d $(INSTALL_HOME); then \
		echo "\t\t Griz directory exists for version $(GRIZ_VERSION)"; \
	else \
		echo "\t\t Creating Griz directory for version $(GRIZ_VERSION)"; \
		mkdir -p $(INSTALL_HOME); \
	fi;
	cd $(INSTALL_HOME); \
	if test -d $(GRIZ_VERSION); then \
		echo "\t\t Griz directory exists for version $(GRIZ_VERSION)"; \
	else \
		echo "\t\t Creating Griz directory for version $(GRIZ_VERSION)"; \
		mkdir $(GRIZ_VERSION); \
	    cd $(GRIZ_VERSION); \
		mkdir Font bin; \
	fi; 
	cd $(INSTALL_HOME)/$(GRIZ_VERSION)/bin; \
	if test -e $(ROOT_DIR)/../Doc/Griz4-Manual-$(GRIZ_VERSION)/GrizUsersGuide-$(GRIZ_VERSION).pdf; then \
		cp $(ROOT_DIR)/../Doc/Griz4-Manual-$(GRIZ_VERSION)/GrizUsersGuide-$(GRIZ_VERSION).pdf .; \
		ln -sf GrizUsersGuide-$(GRIZ_VERSION).pdf griz_manual.pdf; \
	fi ;
	if test -e ../Doc/Griz4-Manual-$(GRIZ_VERSION)/griz_relnotes.pdf; then \
		cp ../Doc/Griz4-Manual-$(GRIZ_VERSION)/griz_relnotes.pdf $(INSTALL_HOME)/$(GRIZ_VERSION)/bin/.; \
	fi
	

install-setversion: install-chmod 
	echo " "; \
	echo "\t\t Setting new Griz Version to : $(GRIZ_VERSION)"; \
	cd $(INSTALL_HOME); \
	ln -sf $(GRIZ_VERSION) grizversion; \
	ls -l  $(GRIZ_VERSION) grizversion; 

install-chmod: install-updatefont
	echo " "; \
	echo "\t\t Setting Griz permissions"; \
	cd $(INSTALL_HOME); \
	if test -d $(GRIZ_VERSION); then \
		chmod 770 $(GRIZ_VERSION); \
		chmod -R 750 $(GRIZ_VERSION); \
		chgrp -R mdgusers $(GRIZ_VERSION); \
	else \
		echo "\t\t Griz version $(GRIZ_VERSION) is missing"; \
	fi; 

install-updatefont: install-initversion 
	echo " "; \
	echo "\t\t Installing font files"; \
	cd $(INSTALL_HOME); \
	if test -d $(GRIZ_VERSION); then \
		cp $(ROOT_DIR)/HersheyLib/hfonts/futura.l $(INSTALL_HOME)/$(GRIZ_VERSION)/Font; \
	else \
		echo "\t\t Griz version $(GRIZ_VERSION) is missing"; \
	fi; 



uninstall:
